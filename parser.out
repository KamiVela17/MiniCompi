Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PRINCIPAL ID LLAVE_ABRE cuerpo LLAVE_CIERRA
Rule 2     cuerpo -> declaracion cuerpo2
Rule 3     cuerpo -> asig cuerpo2
Rule 4     cuerpo -> println cuerpo2
Rule 5     cuerpo -> para cuerpo2
Rule 6     cuerpo -> sif cuerpo2
Rule 7     cuerpo -> dhacer cuerpo2
Rule 8     cuerpo -> res cuerpo2
Rule 9     cuerpo -> empty
Rule 10    cuerpo2 -> cuerpo
Rule 11    cuerpo2 -> empty
Rule 12    declaracion -> tipod asig
Rule 13    tipod -> INTEGER
Rule 14    tipod -> DOUBLE
Rule 15    tipod -> STRING
Rule 16    println -> PRINTLN idnum TOKEN_ASIG
Rule 17    asig -> ID tipoasig masasig TOKEN_ASIG
Rule 18    tipoasig -> IGUAL idnum
Rule 19    tipoasig -> IGUAL COMILLA ID COMILLA
Rule 20    idnum -> num
Rule 21    idnum -> ID
Rule 22    num -> NUM_INTEGER
Rule 23    num -> NUM_DOUBLE
Rule 24    masasig -> COMA asig masasig
Rule 25    masasig -> oparit idnum masasig
Rule 26    masasig -> empty
Rule 27    para -> CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA
Rule 28    condicionpara -> inicio TOKEN_ASIG fin TOKEN_ASIG indec
Rule 29    inicio -> ID IGUAL idnum
Rule 30    fin -> ID oprel idnum
Rule 31    indec -> idnum MAS MAS
Rule 32    indec -> idnum MENOS MENOS
Rule 33    sif -> COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA
Rule 34    dhacer -> CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA
Rule 35    res -> idnum oparit idnum
Rule 36    condicion -> ID oprel mascondicion
Rule 37    mascondicion -> idnum oprel mascondicion
Rule 38    mascondicion -> idnum
Rule 39    oparit -> MAS
Rule 40    oparit -> MENOS
Rule 41    oparit -> MULTI
Rule 42    oparit -> DIVI
Rule 43    oprel -> MNQ
Rule 44    oprel -> MYQ
Rule 45    oprel -> MNIQ
Rule 46    oprel -> MYIQ
Rule 47    oprel -> EQ
Rule 48    oprel -> DIST
Rule 49    empty -> <empty>

Terminals, with rules where they appear

CIC_DO               : 34
CIC_FOR              : 27
CIC_WHILE            : 34
COMA                 : 24
COMILLA              : 19 19
COND_IF              : 33
COND_THEN            : 33
DIST                 : 48
DIVI                 : 42
DOUBLE               : 14
EQ                   : 47
ID                   : 1 17 19 21 29 30 36
IGUAL                : 18 19 29
INTEGER              : 13
LLAVE_ABRE           : 1 27 33 34
LLAVE_CIERRA         : 1 27 33 34
MAS                  : 31 31 39
MENOS                : 32 32 40
MNIQ                 : 45
MNQ                  : 43
MULTI                : 41
MYIQ                 : 46
MYQ                  : 44
NUM_DOUBLE           : 23
NUM_INTEGER          : 22
PAREN_ABRE           : 27 33 34
PAREN_CIERRA         : 27 33 34
PRINCIPAL            : 1
PRINTLN              : 16
STRING               : 15
TOKEN_ASIG           : 16 17 28 28
error                : 

Nonterminals, with rules where they appear

asig                 : 3 12 24
condicion            : 33 34
condicionpara        : 27
cuerpo               : 1 10 27 33 34
cuerpo2              : 2 3 4 5 6 7 8
declaracion          : 2
dhacer               : 7
empty                : 9 11 26
fin                  : 28
idnum                : 16 18 25 29 30 31 32 35 35 37 38
indec                : 28
inicio               : 28
masasig              : 17 24 25
mascondicion         : 36 37
num                  : 20
oparit               : 25 35
oprel                : 30 36 37
para                 : 5
println              : 4
program              : 0
res                  : 8
sif                  : 6
tipoasig             : 17
tipod                : 12

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PRINCIPAL ID LLAVE_ABRE cuerpo LLAVE_CIERRA

    PRINCIPAL       shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PRINCIPAL . ID LLAVE_ABRE cuerpo LLAVE_CIERRA

    ID              shift and go to state 3


state 3

    (1) program -> PRINCIPAL ID . LLAVE_ABRE cuerpo LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 4


state 4

    (1) program -> PRINCIPAL ID LLAVE_ABRE . cuerpo LLAVE_CIERRA
    (2) cuerpo -> . declaracion cuerpo2
    (3) cuerpo -> . asig cuerpo2
    (4) cuerpo -> . println cuerpo2
    (5) cuerpo -> . para cuerpo2
    (6) cuerpo -> . sif cuerpo2
    (7) cuerpo -> . dhacer cuerpo2
    (8) cuerpo -> . res cuerpo2
    (9) cuerpo -> . empty
    (12) declaracion -> . tipod asig
    (17) asig -> . ID tipoasig masasig TOKEN_ASIG
    (16) println -> . PRINTLN idnum TOKEN_ASIG
    (27) para -> . CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA
    (33) sif -> . COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA
    (34) dhacer -> . CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA
    (35) res -> . idnum oparit idnum
    (49) empty -> .
    (13) tipod -> . INTEGER
    (14) tipod -> . DOUBLE
    (15) tipod -> . STRING
    (20) idnum -> . num
    (21) idnum -> . ID
    (22) num -> . NUM_INTEGER
    (23) num -> . NUM_DOUBLE

    ID              shift and go to state 21
    PRINTLN         shift and go to state 7
    CIC_FOR         shift and go to state 20
    COND_IF         shift and go to state 6
    CIC_DO          shift and go to state 19
    LLAVE_CIERRA    reduce using rule 49 (empty -> .)
    INTEGER         shift and go to state 14
    DOUBLE          shift and go to state 23
    STRING          shift and go to state 16
    NUM_INTEGER     shift and go to state 22
    NUM_DOUBLE      shift and go to state 8

    num                            shift and go to state 24
    para                           shift and go to state 17
    tipod                          shift and go to state 5
    asig                           shift and go to state 9
    res                            shift and go to state 10
    idnum                          shift and go to state 11
    dhacer                         shift and go to state 12
    cuerpo                         shift and go to state 18
    empty                          shift and go to state 15
    sif                            shift and go to state 13
    println                        shift and go to state 26
    declaracion                    shift and go to state 25

state 5

    (12) declaracion -> tipod . asig
    (17) asig -> . ID tipoasig masasig TOKEN_ASIG

    ID              shift and go to state 28

    asig                           shift and go to state 27

state 6

    (33) sif -> COND_IF . PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA

    PAREN_ABRE      shift and go to state 29


state 7

    (16) println -> PRINTLN . idnum TOKEN_ASIG
    (20) idnum -> . num
    (21) idnum -> . ID
    (22) num -> . NUM_INTEGER
    (23) num -> . NUM_DOUBLE

    ID              shift and go to state 31
    NUM_INTEGER     shift and go to state 22
    NUM_DOUBLE      shift and go to state 8

    num                            shift and go to state 24
    idnum                          shift and go to state 30

state 8

    (23) num -> NUM_DOUBLE .

    TOKEN_ASIG      reduce using rule 23 (num -> NUM_DOUBLE .)
    ID              reduce using rule 23 (num -> NUM_DOUBLE .)
    PRINTLN         reduce using rule 23 (num -> NUM_DOUBLE .)
    CIC_FOR         reduce using rule 23 (num -> NUM_DOUBLE .)
    COND_IF         reduce using rule 23 (num -> NUM_DOUBLE .)
    CIC_DO          reduce using rule 23 (num -> NUM_DOUBLE .)
    INTEGER         reduce using rule 23 (num -> NUM_DOUBLE .)
    DOUBLE          reduce using rule 23 (num -> NUM_DOUBLE .)
    STRING          reduce using rule 23 (num -> NUM_DOUBLE .)
    NUM_INTEGER     reduce using rule 23 (num -> NUM_DOUBLE .)
    NUM_DOUBLE      reduce using rule 23 (num -> NUM_DOUBLE .)
    LLAVE_CIERRA    reduce using rule 23 (num -> NUM_DOUBLE .)
    MAS             reduce using rule 23 (num -> NUM_DOUBLE .)
    MENOS           reduce using rule 23 (num -> NUM_DOUBLE .)
    MULTI           reduce using rule 23 (num -> NUM_DOUBLE .)
    DIVI            reduce using rule 23 (num -> NUM_DOUBLE .)
    MNQ             reduce using rule 23 (num -> NUM_DOUBLE .)
    MYQ             reduce using rule 23 (num -> NUM_DOUBLE .)
    MNIQ            reduce using rule 23 (num -> NUM_DOUBLE .)
    MYIQ            reduce using rule 23 (num -> NUM_DOUBLE .)
    EQ              reduce using rule 23 (num -> NUM_DOUBLE .)
    DIST            reduce using rule 23 (num -> NUM_DOUBLE .)
    PAREN_CIERRA    reduce using rule 23 (num -> NUM_DOUBLE .)
    COMA            reduce using rule 23 (num -> NUM_DOUBLE .)


state 9

    (3) cuerpo -> asig . cuerpo2
    (10) cuerpo2 -> . cuerpo
    (11) cuerpo2 -> . empty
    (2) cuerpo -> . declaracion cuerpo2
    (3) cuerpo -> . asig cuerpo2
    (4) cuerpo -> . println cuerpo2
    (5) cuerpo -> . para cuerpo2
    (6) cuerpo -> . sif cuerpo2
    (7) cuerpo -> . dhacer cuerpo2
    (8) cuerpo -> . res cuerpo2
    (9) cuerpo -> . empty
    (49) empty -> .
    (12) declaracion -> . tipod asig
    (17) asig -> . ID tipoasig masasig TOKEN_ASIG
    (16) println -> . PRINTLN idnum TOKEN_ASIG
    (27) para -> . CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA
    (33) sif -> . COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA
    (34) dhacer -> . CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA
    (35) res -> . idnum oparit idnum
    (13) tipod -> . INTEGER
    (14) tipod -> . DOUBLE
    (15) tipod -> . STRING
    (20) idnum -> . num
    (21) idnum -> . ID
    (22) num -> . NUM_INTEGER
    (23) num -> . NUM_DOUBLE

    LLAVE_CIERRA    reduce using rule 49 (empty -> .)
    ID              shift and go to state 21
    PRINTLN         shift and go to state 7
    CIC_FOR         shift and go to state 20
    COND_IF         shift and go to state 6
    CIC_DO          shift and go to state 19
    INTEGER         shift and go to state 14
    DOUBLE          shift and go to state 23
    STRING          shift and go to state 16
    NUM_INTEGER     shift and go to state 22
    NUM_DOUBLE      shift and go to state 8

    num                            shift and go to state 24
    para                           shift and go to state 17
    tipod                          shift and go to state 5
    asig                           shift and go to state 9
    res                            shift and go to state 10
    idnum                          shift and go to state 11
    dhacer                         shift and go to state 12
    cuerpo                         shift and go to state 34
    empty                          shift and go to state 33
    cuerpo2                        shift and go to state 32
    println                        shift and go to state 26
    declaracion                    shift and go to state 25
    sif                            shift and go to state 13

state 10

    (8) cuerpo -> res . cuerpo2
    (10) cuerpo2 -> . cuerpo
    (11) cuerpo2 -> . empty
    (2) cuerpo -> . declaracion cuerpo2
    (3) cuerpo -> . asig cuerpo2
    (4) cuerpo -> . println cuerpo2
    (5) cuerpo -> . para cuerpo2
    (6) cuerpo -> . sif cuerpo2
    (7) cuerpo -> . dhacer cuerpo2
    (8) cuerpo -> . res cuerpo2
    (9) cuerpo -> . empty
    (49) empty -> .
    (12) declaracion -> . tipod asig
    (17) asig -> . ID tipoasig masasig TOKEN_ASIG
    (16) println -> . PRINTLN idnum TOKEN_ASIG
    (27) para -> . CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA
    (33) sif -> . COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA
    (34) dhacer -> . CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA
    (35) res -> . idnum oparit idnum
    (13) tipod -> . INTEGER
    (14) tipod -> . DOUBLE
    (15) tipod -> . STRING
    (20) idnum -> . num
    (21) idnum -> . ID
    (22) num -> . NUM_INTEGER
    (23) num -> . NUM_DOUBLE

    LLAVE_CIERRA    reduce using rule 49 (empty -> .)
    ID              shift and go to state 21
    PRINTLN         shift and go to state 7
    CIC_FOR         shift and go to state 20
    COND_IF         shift and go to state 6
    CIC_DO          shift and go to state 19
    INTEGER         shift and go to state 14
    DOUBLE          shift and go to state 23
    STRING          shift and go to state 16
    NUM_INTEGER     shift and go to state 22
    NUM_DOUBLE      shift and go to state 8

    num                            shift and go to state 24
    para                           shift and go to state 17
    tipod                          shift and go to state 5
    asig                           shift and go to state 9
    res                            shift and go to state 10
    idnum                          shift and go to state 11
    dhacer                         shift and go to state 12
    cuerpo                         shift and go to state 34
    empty                          shift and go to state 33
    cuerpo2                        shift and go to state 35
    println                        shift and go to state 26
    declaracion                    shift and go to state 25
    sif                            shift and go to state 13

state 11

    (35) res -> idnum . oparit idnum
    (39) oparit -> . MAS
    (40) oparit -> . MENOS
    (41) oparit -> . MULTI
    (42) oparit -> . DIVI

    MAS             shift and go to state 36
    MENOS           shift and go to state 39
    MULTI           shift and go to state 38
    DIVI            shift and go to state 37

    oparit                         shift and go to state 40

state 12

    (7) cuerpo -> dhacer . cuerpo2
    (10) cuerpo2 -> . cuerpo
    (11) cuerpo2 -> . empty
    (2) cuerpo -> . declaracion cuerpo2
    (3) cuerpo -> . asig cuerpo2
    (4) cuerpo -> . println cuerpo2
    (5) cuerpo -> . para cuerpo2
    (6) cuerpo -> . sif cuerpo2
    (7) cuerpo -> . dhacer cuerpo2
    (8) cuerpo -> . res cuerpo2
    (9) cuerpo -> . empty
    (49) empty -> .
    (12) declaracion -> . tipod asig
    (17) asig -> . ID tipoasig masasig TOKEN_ASIG
    (16) println -> . PRINTLN idnum TOKEN_ASIG
    (27) para -> . CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA
    (33) sif -> . COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA
    (34) dhacer -> . CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA
    (35) res -> . idnum oparit idnum
    (13) tipod -> . INTEGER
    (14) tipod -> . DOUBLE
    (15) tipod -> . STRING
    (20) idnum -> . num
    (21) idnum -> . ID
    (22) num -> . NUM_INTEGER
    (23) num -> . NUM_DOUBLE

    LLAVE_CIERRA    reduce using rule 49 (empty -> .)
    ID              shift and go to state 21
    PRINTLN         shift and go to state 7
    CIC_FOR         shift and go to state 20
    COND_IF         shift and go to state 6
    CIC_DO          shift and go to state 19
    INTEGER         shift and go to state 14
    DOUBLE          shift and go to state 23
    STRING          shift and go to state 16
    NUM_INTEGER     shift and go to state 22
    NUM_DOUBLE      shift and go to state 8

    num                            shift and go to state 24
    para                           shift and go to state 17
    tipod                          shift and go to state 5
    asig                           shift and go to state 9
    res                            shift and go to state 10
    idnum                          shift and go to state 11
    dhacer                         shift and go to state 12
    cuerpo                         shift and go to state 34
    empty                          shift and go to state 33
    cuerpo2                        shift and go to state 41
    println                        shift and go to state 26
    declaracion                    shift and go to state 25
    sif                            shift and go to state 13

state 13

    (6) cuerpo -> sif . cuerpo2
    (10) cuerpo2 -> . cuerpo
    (11) cuerpo2 -> . empty
    (2) cuerpo -> . declaracion cuerpo2
    (3) cuerpo -> . asig cuerpo2
    (4) cuerpo -> . println cuerpo2
    (5) cuerpo -> . para cuerpo2
    (6) cuerpo -> . sif cuerpo2
    (7) cuerpo -> . dhacer cuerpo2
    (8) cuerpo -> . res cuerpo2
    (9) cuerpo -> . empty
    (49) empty -> .
    (12) declaracion -> . tipod asig
    (17) asig -> . ID tipoasig masasig TOKEN_ASIG
    (16) println -> . PRINTLN idnum TOKEN_ASIG
    (27) para -> . CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA
    (33) sif -> . COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA
    (34) dhacer -> . CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA
    (35) res -> . idnum oparit idnum
    (13) tipod -> . INTEGER
    (14) tipod -> . DOUBLE
    (15) tipod -> . STRING
    (20) idnum -> . num
    (21) idnum -> . ID
    (22) num -> . NUM_INTEGER
    (23) num -> . NUM_DOUBLE

    LLAVE_CIERRA    reduce using rule 49 (empty -> .)
    ID              shift and go to state 21
    PRINTLN         shift and go to state 7
    CIC_FOR         shift and go to state 20
    COND_IF         shift and go to state 6
    CIC_DO          shift and go to state 19
    INTEGER         shift and go to state 14
    DOUBLE          shift and go to state 23
    STRING          shift and go to state 16
    NUM_INTEGER     shift and go to state 22
    NUM_DOUBLE      shift and go to state 8

    num                            shift and go to state 24
    para                           shift and go to state 17
    tipod                          shift and go to state 5
    asig                           shift and go to state 9
    res                            shift and go to state 10
    idnum                          shift and go to state 11
    dhacer                         shift and go to state 12
    cuerpo                         shift and go to state 34
    empty                          shift and go to state 33
    sif                            shift and go to state 13
    cuerpo2                        shift and go to state 42
    println                        shift and go to state 26
    declaracion                    shift and go to state 25

state 14

    (13) tipod -> INTEGER .

    ID              reduce using rule 13 (tipod -> INTEGER .)


state 15

    (9) cuerpo -> empty .

    LLAVE_CIERRA    reduce using rule 9 (cuerpo -> empty .)


state 16

    (15) tipod -> STRING .

    ID              reduce using rule 15 (tipod -> STRING .)


state 17

    (5) cuerpo -> para . cuerpo2
    (10) cuerpo2 -> . cuerpo
    (11) cuerpo2 -> . empty
    (2) cuerpo -> . declaracion cuerpo2
    (3) cuerpo -> . asig cuerpo2
    (4) cuerpo -> . println cuerpo2
    (5) cuerpo -> . para cuerpo2
    (6) cuerpo -> . sif cuerpo2
    (7) cuerpo -> . dhacer cuerpo2
    (8) cuerpo -> . res cuerpo2
    (9) cuerpo -> . empty
    (49) empty -> .
    (12) declaracion -> . tipod asig
    (17) asig -> . ID tipoasig masasig TOKEN_ASIG
    (16) println -> . PRINTLN idnum TOKEN_ASIG
    (27) para -> . CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA
    (33) sif -> . COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA
    (34) dhacer -> . CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA
    (35) res -> . idnum oparit idnum
    (13) tipod -> . INTEGER
    (14) tipod -> . DOUBLE
    (15) tipod -> . STRING
    (20) idnum -> . num
    (21) idnum -> . ID
    (22) num -> . NUM_INTEGER
    (23) num -> . NUM_DOUBLE

    LLAVE_CIERRA    reduce using rule 49 (empty -> .)
    ID              shift and go to state 21
    PRINTLN         shift and go to state 7
    CIC_FOR         shift and go to state 20
    COND_IF         shift and go to state 6
    CIC_DO          shift and go to state 19
    INTEGER         shift and go to state 14
    DOUBLE          shift and go to state 23
    STRING          shift and go to state 16
    NUM_INTEGER     shift and go to state 22
    NUM_DOUBLE      shift and go to state 8

    num                            shift and go to state 24
    para                           shift and go to state 17
    tipod                          shift and go to state 5
    asig                           shift and go to state 9
    res                            shift and go to state 10
    idnum                          shift and go to state 11
    dhacer                         shift and go to state 12
    cuerpo                         shift and go to state 34
    empty                          shift and go to state 33
    cuerpo2                        shift and go to state 43
    println                        shift and go to state 26
    declaracion                    shift and go to state 25
    sif                            shift and go to state 13

state 18

    (1) program -> PRINCIPAL ID LLAVE_ABRE cuerpo . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 44


state 19

    (34) dhacer -> CIC_DO . LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA

    LLAVE_ABRE      shift and go to state 45


state 20

    (27) para -> CIC_FOR . PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA

    PAREN_ABRE      shift and go to state 46


state 21

    (17) asig -> ID . tipoasig masasig TOKEN_ASIG
    (21) idnum -> ID .
    (18) tipoasig -> . IGUAL idnum
    (19) tipoasig -> . IGUAL COMILLA ID COMILLA

    MAS             reduce using rule 21 (idnum -> ID .)
    MENOS           reduce using rule 21 (idnum -> ID .)
    MULTI           reduce using rule 21 (idnum -> ID .)
    DIVI            reduce using rule 21 (idnum -> ID .)
    IGUAL           shift and go to state 47

    tipoasig                       shift and go to state 48

state 22

    (22) num -> NUM_INTEGER .

    TOKEN_ASIG      reduce using rule 22 (num -> NUM_INTEGER .)
    ID              reduce using rule 22 (num -> NUM_INTEGER .)
    PRINTLN         reduce using rule 22 (num -> NUM_INTEGER .)
    CIC_FOR         reduce using rule 22 (num -> NUM_INTEGER .)
    COND_IF         reduce using rule 22 (num -> NUM_INTEGER .)
    CIC_DO          reduce using rule 22 (num -> NUM_INTEGER .)
    INTEGER         reduce using rule 22 (num -> NUM_INTEGER .)
    DOUBLE          reduce using rule 22 (num -> NUM_INTEGER .)
    STRING          reduce using rule 22 (num -> NUM_INTEGER .)
    NUM_INTEGER     reduce using rule 22 (num -> NUM_INTEGER .)
    NUM_DOUBLE      reduce using rule 22 (num -> NUM_INTEGER .)
    LLAVE_CIERRA    reduce using rule 22 (num -> NUM_INTEGER .)
    MAS             reduce using rule 22 (num -> NUM_INTEGER .)
    MENOS           reduce using rule 22 (num -> NUM_INTEGER .)
    MULTI           reduce using rule 22 (num -> NUM_INTEGER .)
    DIVI            reduce using rule 22 (num -> NUM_INTEGER .)
    MNQ             reduce using rule 22 (num -> NUM_INTEGER .)
    MYQ             reduce using rule 22 (num -> NUM_INTEGER .)
    MNIQ            reduce using rule 22 (num -> NUM_INTEGER .)
    MYIQ            reduce using rule 22 (num -> NUM_INTEGER .)
    EQ              reduce using rule 22 (num -> NUM_INTEGER .)
    DIST            reduce using rule 22 (num -> NUM_INTEGER .)
    PAREN_CIERRA    reduce using rule 22 (num -> NUM_INTEGER .)
    COMA            reduce using rule 22 (num -> NUM_INTEGER .)


state 23

    (14) tipod -> DOUBLE .

    ID              reduce using rule 14 (tipod -> DOUBLE .)


state 24

    (20) idnum -> num .

    MAS             reduce using rule 20 (idnum -> num .)
    MENOS           reduce using rule 20 (idnum -> num .)
    MULTI           reduce using rule 20 (idnum -> num .)
    DIVI            reduce using rule 20 (idnum -> num .)
    MNQ             reduce using rule 20 (idnum -> num .)
    MYQ             reduce using rule 20 (idnum -> num .)
    MNIQ            reduce using rule 20 (idnum -> num .)
    MYIQ            reduce using rule 20 (idnum -> num .)
    EQ              reduce using rule 20 (idnum -> num .)
    DIST            reduce using rule 20 (idnum -> num .)
    PAREN_CIERRA    reduce using rule 20 (idnum -> num .)
    TOKEN_ASIG      reduce using rule 20 (idnum -> num .)
    COMA            reduce using rule 20 (idnum -> num .)
    ID              reduce using rule 20 (idnum -> num .)
    PRINTLN         reduce using rule 20 (idnum -> num .)
    CIC_FOR         reduce using rule 20 (idnum -> num .)
    COND_IF         reduce using rule 20 (idnum -> num .)
    CIC_DO          reduce using rule 20 (idnum -> num .)
    INTEGER         reduce using rule 20 (idnum -> num .)
    DOUBLE          reduce using rule 20 (idnum -> num .)
    STRING          reduce using rule 20 (idnum -> num .)
    NUM_INTEGER     reduce using rule 20 (idnum -> num .)
    NUM_DOUBLE      reduce using rule 20 (idnum -> num .)
    LLAVE_CIERRA    reduce using rule 20 (idnum -> num .)


state 25

    (2) cuerpo -> declaracion . cuerpo2
    (10) cuerpo2 -> . cuerpo
    (11) cuerpo2 -> . empty
    (2) cuerpo -> . declaracion cuerpo2
    (3) cuerpo -> . asig cuerpo2
    (4) cuerpo -> . println cuerpo2
    (5) cuerpo -> . para cuerpo2
    (6) cuerpo -> . sif cuerpo2
    (7) cuerpo -> . dhacer cuerpo2
    (8) cuerpo -> . res cuerpo2
    (9) cuerpo -> . empty
    (49) empty -> .
    (12) declaracion -> . tipod asig
    (17) asig -> . ID tipoasig masasig TOKEN_ASIG
    (16) println -> . PRINTLN idnum TOKEN_ASIG
    (27) para -> . CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA
    (33) sif -> . COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA
    (34) dhacer -> . CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA
    (35) res -> . idnum oparit idnum
    (13) tipod -> . INTEGER
    (14) tipod -> . DOUBLE
    (15) tipod -> . STRING
    (20) idnum -> . num
    (21) idnum -> . ID
    (22) num -> . NUM_INTEGER
    (23) num -> . NUM_DOUBLE

    LLAVE_CIERRA    reduce using rule 49 (empty -> .)
    ID              shift and go to state 21
    PRINTLN         shift and go to state 7
    CIC_FOR         shift and go to state 20
    COND_IF         shift and go to state 6
    CIC_DO          shift and go to state 19
    INTEGER         shift and go to state 14
    DOUBLE          shift and go to state 23
    STRING          shift and go to state 16
    NUM_INTEGER     shift and go to state 22
    NUM_DOUBLE      shift and go to state 8

    num                            shift and go to state 24
    para                           shift and go to state 17
    tipod                          shift and go to state 5
    asig                           shift and go to state 9
    res                            shift and go to state 10
    idnum                          shift and go to state 11
    dhacer                         shift and go to state 12
    cuerpo                         shift and go to state 34
    declaracion                    shift and go to state 25
    cuerpo2                        shift and go to state 49
    println                        shift and go to state 26
    empty                          shift and go to state 33
    sif                            shift and go to state 13

state 26

    (4) cuerpo -> println . cuerpo2
    (10) cuerpo2 -> . cuerpo
    (11) cuerpo2 -> . empty
    (2) cuerpo -> . declaracion cuerpo2
    (3) cuerpo -> . asig cuerpo2
    (4) cuerpo -> . println cuerpo2
    (5) cuerpo -> . para cuerpo2
    (6) cuerpo -> . sif cuerpo2
    (7) cuerpo -> . dhacer cuerpo2
    (8) cuerpo -> . res cuerpo2
    (9) cuerpo -> . empty
    (49) empty -> .
    (12) declaracion -> . tipod asig
    (17) asig -> . ID tipoasig masasig TOKEN_ASIG
    (16) println -> . PRINTLN idnum TOKEN_ASIG
    (27) para -> . CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA
    (33) sif -> . COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA
    (34) dhacer -> . CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA
    (35) res -> . idnum oparit idnum
    (13) tipod -> . INTEGER
    (14) tipod -> . DOUBLE
    (15) tipod -> . STRING
    (20) idnum -> . num
    (21) idnum -> . ID
    (22) num -> . NUM_INTEGER
    (23) num -> . NUM_DOUBLE

    LLAVE_CIERRA    reduce using rule 49 (empty -> .)
    ID              shift and go to state 21
    PRINTLN         shift and go to state 7
    CIC_FOR         shift and go to state 20
    COND_IF         shift and go to state 6
    CIC_DO          shift and go to state 19
    INTEGER         shift and go to state 14
    DOUBLE          shift and go to state 23
    STRING          shift and go to state 16
    NUM_INTEGER     shift and go to state 22
    NUM_DOUBLE      shift and go to state 8

    num                            shift and go to state 24
    para                           shift and go to state 17
    tipod                          shift and go to state 5
    asig                           shift and go to state 9
    res                            shift and go to state 10
    idnum                          shift and go to state 11
    dhacer                         shift and go to state 12
    cuerpo                         shift and go to state 34
    empty                          shift and go to state 33
    cuerpo2                        shift and go to state 50
    println                        shift and go to state 26
    declaracion                    shift and go to state 25
    sif                            shift and go to state 13

state 27

    (12) declaracion -> tipod asig .

    ID              reduce using rule 12 (declaracion -> tipod asig .)
    PRINTLN         reduce using rule 12 (declaracion -> tipod asig .)
    CIC_FOR         reduce using rule 12 (declaracion -> tipod asig .)
    COND_IF         reduce using rule 12 (declaracion -> tipod asig .)
    CIC_DO          reduce using rule 12 (declaracion -> tipod asig .)
    INTEGER         reduce using rule 12 (declaracion -> tipod asig .)
    DOUBLE          reduce using rule 12 (declaracion -> tipod asig .)
    STRING          reduce using rule 12 (declaracion -> tipod asig .)
    NUM_INTEGER     reduce using rule 12 (declaracion -> tipod asig .)
    NUM_DOUBLE      reduce using rule 12 (declaracion -> tipod asig .)
    LLAVE_CIERRA    reduce using rule 12 (declaracion -> tipod asig .)


state 28

    (17) asig -> ID . tipoasig masasig TOKEN_ASIG
    (18) tipoasig -> . IGUAL idnum
    (19) tipoasig -> . IGUAL COMILLA ID COMILLA

    IGUAL           shift and go to state 47

    tipoasig                       shift and go to state 48

state 29

    (33) sif -> COND_IF PAREN_ABRE . condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA
    (36) condicion -> . ID oprel mascondicion

    ID              shift and go to state 52

    condicion                      shift and go to state 51

state 30

    (16) println -> PRINTLN idnum . TOKEN_ASIG

    TOKEN_ASIG      shift and go to state 53


state 31

    (21) idnum -> ID .

    MNQ             reduce using rule 21 (idnum -> ID .)
    MYQ             reduce using rule 21 (idnum -> ID .)
    MNIQ            reduce using rule 21 (idnum -> ID .)
    MYIQ            reduce using rule 21 (idnum -> ID .)
    EQ              reduce using rule 21 (idnum -> ID .)
    DIST            reduce using rule 21 (idnum -> ID .)
    PAREN_CIERRA    reduce using rule 21 (idnum -> ID .)
    MAS             reduce using rule 21 (idnum -> ID .)
    MENOS           reduce using rule 21 (idnum -> ID .)
    TOKEN_ASIG      reduce using rule 21 (idnum -> ID .)
    COMA            reduce using rule 21 (idnum -> ID .)
    MULTI           reduce using rule 21 (idnum -> ID .)
    DIVI            reduce using rule 21 (idnum -> ID .)
    ID              reduce using rule 21 (idnum -> ID .)
    PRINTLN         reduce using rule 21 (idnum -> ID .)
    CIC_FOR         reduce using rule 21 (idnum -> ID .)
    COND_IF         reduce using rule 21 (idnum -> ID .)
    CIC_DO          reduce using rule 21 (idnum -> ID .)
    INTEGER         reduce using rule 21 (idnum -> ID .)
    DOUBLE          reduce using rule 21 (idnum -> ID .)
    STRING          reduce using rule 21 (idnum -> ID .)
    NUM_INTEGER     reduce using rule 21 (idnum -> ID .)
    NUM_DOUBLE      reduce using rule 21 (idnum -> ID .)
    LLAVE_CIERRA    reduce using rule 21 (idnum -> ID .)


state 32

    (3) cuerpo -> asig cuerpo2 .

    LLAVE_CIERRA    reduce using rule 3 (cuerpo -> asig cuerpo2 .)


state 33

    (11) cuerpo2 -> empty .
    (9) cuerpo -> empty .

  ! reduce/reduce conflict for LLAVE_CIERRA resolved using rule 9 (cuerpo -> empty .)
    LLAVE_CIERRA    reduce using rule 9 (cuerpo -> empty .)

  ! LLAVE_CIERRA    [ reduce using rule 11 (cuerpo2 -> empty .) ]


state 34

    (10) cuerpo2 -> cuerpo .

    LLAVE_CIERRA    reduce using rule 10 (cuerpo2 -> cuerpo .)


state 35

    (8) cuerpo -> res cuerpo2 .

    LLAVE_CIERRA    reduce using rule 8 (cuerpo -> res cuerpo2 .)


state 36

    (39) oparit -> MAS .

    ID              reduce using rule 39 (oparit -> MAS .)
    NUM_INTEGER     reduce using rule 39 (oparit -> MAS .)
    NUM_DOUBLE      reduce using rule 39 (oparit -> MAS .)


state 37

    (42) oparit -> DIVI .

    ID              reduce using rule 42 (oparit -> DIVI .)
    NUM_INTEGER     reduce using rule 42 (oparit -> DIVI .)
    NUM_DOUBLE      reduce using rule 42 (oparit -> DIVI .)


state 38

    (41) oparit -> MULTI .

    ID              reduce using rule 41 (oparit -> MULTI .)
    NUM_INTEGER     reduce using rule 41 (oparit -> MULTI .)
    NUM_DOUBLE      reduce using rule 41 (oparit -> MULTI .)


state 39

    (40) oparit -> MENOS .

    ID              reduce using rule 40 (oparit -> MENOS .)
    NUM_INTEGER     reduce using rule 40 (oparit -> MENOS .)
    NUM_DOUBLE      reduce using rule 40 (oparit -> MENOS .)


state 40

    (35) res -> idnum oparit . idnum
    (20) idnum -> . num
    (21) idnum -> . ID
    (22) num -> . NUM_INTEGER
    (23) num -> . NUM_DOUBLE

    ID              shift and go to state 31
    NUM_INTEGER     shift and go to state 22
    NUM_DOUBLE      shift and go to state 8

    num                            shift and go to state 24
    idnum                          shift and go to state 54

state 41

    (7) cuerpo -> dhacer cuerpo2 .

    LLAVE_CIERRA    reduce using rule 7 (cuerpo -> dhacer cuerpo2 .)


state 42

    (6) cuerpo -> sif cuerpo2 .

    LLAVE_CIERRA    reduce using rule 6 (cuerpo -> sif cuerpo2 .)


state 43

    (5) cuerpo -> para cuerpo2 .

    LLAVE_CIERRA    reduce using rule 5 (cuerpo -> para cuerpo2 .)


state 44

    (1) program -> PRINCIPAL ID LLAVE_ABRE cuerpo LLAVE_CIERRA .

    $end            reduce using rule 1 (program -> PRINCIPAL ID LLAVE_ABRE cuerpo LLAVE_CIERRA .)


state 45

    (34) dhacer -> CIC_DO LLAVE_ABRE . cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA
    (2) cuerpo -> . declaracion cuerpo2
    (3) cuerpo -> . asig cuerpo2
    (4) cuerpo -> . println cuerpo2
    (5) cuerpo -> . para cuerpo2
    (6) cuerpo -> . sif cuerpo2
    (7) cuerpo -> . dhacer cuerpo2
    (8) cuerpo -> . res cuerpo2
    (9) cuerpo -> . empty
    (12) declaracion -> . tipod asig
    (17) asig -> . ID tipoasig masasig TOKEN_ASIG
    (16) println -> . PRINTLN idnum TOKEN_ASIG
    (27) para -> . CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA
    (33) sif -> . COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA
    (34) dhacer -> . CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA
    (35) res -> . idnum oparit idnum
    (49) empty -> .
    (13) tipod -> . INTEGER
    (14) tipod -> . DOUBLE
    (15) tipod -> . STRING
    (20) idnum -> . num
    (21) idnum -> . ID
    (22) num -> . NUM_INTEGER
    (23) num -> . NUM_DOUBLE

    ID              shift and go to state 21
    PRINTLN         shift and go to state 7
    CIC_FOR         shift and go to state 20
    COND_IF         shift and go to state 6
    CIC_DO          shift and go to state 19
    LLAVE_CIERRA    reduce using rule 49 (empty -> .)
    INTEGER         shift and go to state 14
    DOUBLE          shift and go to state 23
    STRING          shift and go to state 16
    NUM_INTEGER     shift and go to state 22
    NUM_DOUBLE      shift and go to state 8

    num                            shift and go to state 24
    para                           shift and go to state 17
    tipod                          shift and go to state 5
    asig                           shift and go to state 9
    res                            shift and go to state 10
    idnum                          shift and go to state 11
    empty                          shift and go to state 15
    dhacer                         shift and go to state 12
    cuerpo                         shift and go to state 55
    sif                            shift and go to state 13
    println                        shift and go to state 26
    declaracion                    shift and go to state 25

state 46

    (27) para -> CIC_FOR PAREN_ABRE . condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA
    (28) condicionpara -> . inicio TOKEN_ASIG fin TOKEN_ASIG indec
    (29) inicio -> . ID IGUAL idnum

    ID              shift and go to state 58

    condicionpara                  shift and go to state 56
    inicio                         shift and go to state 57

state 47

    (18) tipoasig -> IGUAL . idnum
    (19) tipoasig -> IGUAL . COMILLA ID COMILLA
    (20) idnum -> . num
    (21) idnum -> . ID
    (22) num -> . NUM_INTEGER
    (23) num -> . NUM_DOUBLE

    COMILLA         shift and go to state 60
    ID              shift and go to state 31
    NUM_INTEGER     shift and go to state 22
    NUM_DOUBLE      shift and go to state 8

    num                            shift and go to state 24
    idnum                          shift and go to state 59

state 48

    (17) asig -> ID tipoasig . masasig TOKEN_ASIG
    (24) masasig -> . COMA asig masasig
    (25) masasig -> . oparit idnum masasig
    (26) masasig -> . empty
    (39) oparit -> . MAS
    (40) oparit -> . MENOS
    (41) oparit -> . MULTI
    (42) oparit -> . DIVI
    (49) empty -> .

    COMA            shift and go to state 63
    MAS             shift and go to state 36
    MENOS           shift and go to state 39
    MULTI           shift and go to state 38
    DIVI            shift and go to state 37
    TOKEN_ASIG      reduce using rule 49 (empty -> .)

    masasig                        shift and go to state 61
    oparit                         shift and go to state 64
    empty                          shift and go to state 62

state 49

    (2) cuerpo -> declaracion cuerpo2 .

    LLAVE_CIERRA    reduce using rule 2 (cuerpo -> declaracion cuerpo2 .)


state 50

    (4) cuerpo -> println cuerpo2 .

    LLAVE_CIERRA    reduce using rule 4 (cuerpo -> println cuerpo2 .)


state 51

    (33) sif -> COND_IF PAREN_ABRE condicion . PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA

    PAREN_CIERRA    shift and go to state 65


state 52

    (36) condicion -> ID . oprel mascondicion
    (43) oprel -> . MNQ
    (44) oprel -> . MYQ
    (45) oprel -> . MNIQ
    (46) oprel -> . MYIQ
    (47) oprel -> . EQ
    (48) oprel -> . DIST

    MNQ             shift and go to state 71
    MYQ             shift and go to state 68
    MNIQ            shift and go to state 66
    MYIQ            shift and go to state 70
    EQ              shift and go to state 72
    DIST            shift and go to state 67

    oprel                          shift and go to state 69

state 53

    (16) println -> PRINTLN idnum TOKEN_ASIG .

    ID              reduce using rule 16 (println -> PRINTLN idnum TOKEN_ASIG .)
    PRINTLN         reduce using rule 16 (println -> PRINTLN idnum TOKEN_ASIG .)
    CIC_FOR         reduce using rule 16 (println -> PRINTLN idnum TOKEN_ASIG .)
    COND_IF         reduce using rule 16 (println -> PRINTLN idnum TOKEN_ASIG .)
    CIC_DO          reduce using rule 16 (println -> PRINTLN idnum TOKEN_ASIG .)
    INTEGER         reduce using rule 16 (println -> PRINTLN idnum TOKEN_ASIG .)
    DOUBLE          reduce using rule 16 (println -> PRINTLN idnum TOKEN_ASIG .)
    STRING          reduce using rule 16 (println -> PRINTLN idnum TOKEN_ASIG .)
    NUM_INTEGER     reduce using rule 16 (println -> PRINTLN idnum TOKEN_ASIG .)
    NUM_DOUBLE      reduce using rule 16 (println -> PRINTLN idnum TOKEN_ASIG .)
    LLAVE_CIERRA    reduce using rule 16 (println -> PRINTLN idnum TOKEN_ASIG .)


state 54

    (35) res -> idnum oparit idnum .

    ID              reduce using rule 35 (res -> idnum oparit idnum .)
    PRINTLN         reduce using rule 35 (res -> idnum oparit idnum .)
    CIC_FOR         reduce using rule 35 (res -> idnum oparit idnum .)
    COND_IF         reduce using rule 35 (res -> idnum oparit idnum .)
    CIC_DO          reduce using rule 35 (res -> idnum oparit idnum .)
    INTEGER         reduce using rule 35 (res -> idnum oparit idnum .)
    DOUBLE          reduce using rule 35 (res -> idnum oparit idnum .)
    STRING          reduce using rule 35 (res -> idnum oparit idnum .)
    NUM_INTEGER     reduce using rule 35 (res -> idnum oparit idnum .)
    NUM_DOUBLE      reduce using rule 35 (res -> idnum oparit idnum .)
    LLAVE_CIERRA    reduce using rule 35 (res -> idnum oparit idnum .)


state 55

    (34) dhacer -> CIC_DO LLAVE_ABRE cuerpo . LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA

    LLAVE_CIERRA    shift and go to state 73


state 56

    (27) para -> CIC_FOR PAREN_ABRE condicionpara . PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA

    PAREN_CIERRA    shift and go to state 74


state 57

    (28) condicionpara -> inicio . TOKEN_ASIG fin TOKEN_ASIG indec

    TOKEN_ASIG      shift and go to state 75


state 58

    (29) inicio -> ID . IGUAL idnum

    IGUAL           shift and go to state 76


state 59

    (18) tipoasig -> IGUAL idnum .

    COMA            reduce using rule 18 (tipoasig -> IGUAL idnum .)
    MAS             reduce using rule 18 (tipoasig -> IGUAL idnum .)
    MENOS           reduce using rule 18 (tipoasig -> IGUAL idnum .)
    MULTI           reduce using rule 18 (tipoasig -> IGUAL idnum .)
    DIVI            reduce using rule 18 (tipoasig -> IGUAL idnum .)
    TOKEN_ASIG      reduce using rule 18 (tipoasig -> IGUAL idnum .)


state 60

    (19) tipoasig -> IGUAL COMILLA . ID COMILLA

    ID              shift and go to state 77


state 61

    (17) asig -> ID tipoasig masasig . TOKEN_ASIG

    TOKEN_ASIG      shift and go to state 78


state 62

    (26) masasig -> empty .

    TOKEN_ASIG      reduce using rule 26 (masasig -> empty .)


state 63

    (24) masasig -> COMA . asig masasig
    (17) asig -> . ID tipoasig masasig TOKEN_ASIG

    ID              shift and go to state 28

    asig                           shift and go to state 79

state 64

    (25) masasig -> oparit . idnum masasig
    (20) idnum -> . num
    (21) idnum -> . ID
    (22) num -> . NUM_INTEGER
    (23) num -> . NUM_DOUBLE

    ID              shift and go to state 31
    NUM_INTEGER     shift and go to state 22
    NUM_DOUBLE      shift and go to state 8

    num                            shift and go to state 24
    idnum                          shift and go to state 80

state 65

    (33) sif -> COND_IF PAREN_ABRE condicion PAREN_CIERRA . COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA

    COND_THEN       shift and go to state 81


state 66

    (45) oprel -> MNIQ .

    ID              reduce using rule 45 (oprel -> MNIQ .)
    NUM_INTEGER     reduce using rule 45 (oprel -> MNIQ .)
    NUM_DOUBLE      reduce using rule 45 (oprel -> MNIQ .)


state 67

    (48) oprel -> DIST .

    ID              reduce using rule 48 (oprel -> DIST .)
    NUM_INTEGER     reduce using rule 48 (oprel -> DIST .)
    NUM_DOUBLE      reduce using rule 48 (oprel -> DIST .)


state 68

    (44) oprel -> MYQ .

    ID              reduce using rule 44 (oprel -> MYQ .)
    NUM_INTEGER     reduce using rule 44 (oprel -> MYQ .)
    NUM_DOUBLE      reduce using rule 44 (oprel -> MYQ .)


state 69

    (36) condicion -> ID oprel . mascondicion
    (37) mascondicion -> . idnum oprel mascondicion
    (38) mascondicion -> . idnum
    (20) idnum -> . num
    (21) idnum -> . ID
    (22) num -> . NUM_INTEGER
    (23) num -> . NUM_DOUBLE

    ID              shift and go to state 31
    NUM_INTEGER     shift and go to state 22
    NUM_DOUBLE      shift and go to state 8

    mascondicion                   shift and go to state 82
    num                            shift and go to state 24
    idnum                          shift and go to state 83

state 70

    (46) oprel -> MYIQ .

    ID              reduce using rule 46 (oprel -> MYIQ .)
    NUM_INTEGER     reduce using rule 46 (oprel -> MYIQ .)
    NUM_DOUBLE      reduce using rule 46 (oprel -> MYIQ .)


state 71

    (43) oprel -> MNQ .

    ID              reduce using rule 43 (oprel -> MNQ .)
    NUM_INTEGER     reduce using rule 43 (oprel -> MNQ .)
    NUM_DOUBLE      reduce using rule 43 (oprel -> MNQ .)


state 72

    (47) oprel -> EQ .

    ID              reduce using rule 47 (oprel -> EQ .)
    NUM_INTEGER     reduce using rule 47 (oprel -> EQ .)
    NUM_DOUBLE      reduce using rule 47 (oprel -> EQ .)


state 73

    (34) dhacer -> CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA . CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA

    CIC_WHILE       shift and go to state 84


state 74

    (27) para -> CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA . LLAVE_ABRE cuerpo LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 85


state 75

    (28) condicionpara -> inicio TOKEN_ASIG . fin TOKEN_ASIG indec
    (30) fin -> . ID oprel idnum

    ID              shift and go to state 87

    fin                            shift and go to state 86

state 76

    (29) inicio -> ID IGUAL . idnum
    (20) idnum -> . num
    (21) idnum -> . ID
    (22) num -> . NUM_INTEGER
    (23) num -> . NUM_DOUBLE

    ID              shift and go to state 31
    NUM_INTEGER     shift and go to state 22
    NUM_DOUBLE      shift and go to state 8

    num                            shift and go to state 24
    idnum                          shift and go to state 88

state 77

    (19) tipoasig -> IGUAL COMILLA ID . COMILLA

    COMILLA         shift and go to state 89


state 78

    (17) asig -> ID tipoasig masasig TOKEN_ASIG .

    ID              reduce using rule 17 (asig -> ID tipoasig masasig TOKEN_ASIG .)
    PRINTLN         reduce using rule 17 (asig -> ID tipoasig masasig TOKEN_ASIG .)
    CIC_FOR         reduce using rule 17 (asig -> ID tipoasig masasig TOKEN_ASIG .)
    COND_IF         reduce using rule 17 (asig -> ID tipoasig masasig TOKEN_ASIG .)
    CIC_DO          reduce using rule 17 (asig -> ID tipoasig masasig TOKEN_ASIG .)
    INTEGER         reduce using rule 17 (asig -> ID tipoasig masasig TOKEN_ASIG .)
    DOUBLE          reduce using rule 17 (asig -> ID tipoasig masasig TOKEN_ASIG .)
    STRING          reduce using rule 17 (asig -> ID tipoasig masasig TOKEN_ASIG .)
    NUM_INTEGER     reduce using rule 17 (asig -> ID tipoasig masasig TOKEN_ASIG .)
    NUM_DOUBLE      reduce using rule 17 (asig -> ID tipoasig masasig TOKEN_ASIG .)
    LLAVE_CIERRA    reduce using rule 17 (asig -> ID tipoasig masasig TOKEN_ASIG .)
    COMA            reduce using rule 17 (asig -> ID tipoasig masasig TOKEN_ASIG .)
    MAS             reduce using rule 17 (asig -> ID tipoasig masasig TOKEN_ASIG .)
    MENOS           reduce using rule 17 (asig -> ID tipoasig masasig TOKEN_ASIG .)
    MULTI           reduce using rule 17 (asig -> ID tipoasig masasig TOKEN_ASIG .)
    DIVI            reduce using rule 17 (asig -> ID tipoasig masasig TOKEN_ASIG .)
    TOKEN_ASIG      reduce using rule 17 (asig -> ID tipoasig masasig TOKEN_ASIG .)


state 79

    (24) masasig -> COMA asig . masasig
    (24) masasig -> . COMA asig masasig
    (25) masasig -> . oparit idnum masasig
    (26) masasig -> . empty
    (39) oparit -> . MAS
    (40) oparit -> . MENOS
    (41) oparit -> . MULTI
    (42) oparit -> . DIVI
    (49) empty -> .

    COMA            shift and go to state 63
    MAS             shift and go to state 36
    MENOS           shift and go to state 39
    MULTI           shift and go to state 38
    DIVI            shift and go to state 37
    TOKEN_ASIG      reduce using rule 49 (empty -> .)

    oparit                         shift and go to state 64
    masasig                        shift and go to state 90
    empty                          shift and go to state 62

state 80

    (25) masasig -> oparit idnum . masasig
    (24) masasig -> . COMA asig masasig
    (25) masasig -> . oparit idnum masasig
    (26) masasig -> . empty
    (39) oparit -> . MAS
    (40) oparit -> . MENOS
    (41) oparit -> . MULTI
    (42) oparit -> . DIVI
    (49) empty -> .

    COMA            shift and go to state 63
    MAS             shift and go to state 36
    MENOS           shift and go to state 39
    MULTI           shift and go to state 38
    DIVI            shift and go to state 37
    TOKEN_ASIG      reduce using rule 49 (empty -> .)

    oparit                         shift and go to state 64
    masasig                        shift and go to state 91
    empty                          shift and go to state 62

state 81

    (33) sif -> COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN . LLAVE_ABRE cuerpo LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 92


state 82

    (36) condicion -> ID oprel mascondicion .

    PAREN_CIERRA    reduce using rule 36 (condicion -> ID oprel mascondicion .)


state 83

    (37) mascondicion -> idnum . oprel mascondicion
    (38) mascondicion -> idnum .
    (43) oprel -> . MNQ
    (44) oprel -> . MYQ
    (45) oprel -> . MNIQ
    (46) oprel -> . MYIQ
    (47) oprel -> . EQ
    (48) oprel -> . DIST

    PAREN_CIERRA    reduce using rule 38 (mascondicion -> idnum .)
    MNQ             shift and go to state 71
    MYQ             shift and go to state 68
    MNIQ            shift and go to state 66
    MYIQ            shift and go to state 70
    EQ              shift and go to state 72
    DIST            shift and go to state 67

    oprel                          shift and go to state 93

state 84

    (34) dhacer -> CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE . PAREN_ABRE condicion PAREN_CIERRA

    PAREN_ABRE      shift and go to state 94


state 85

    (27) para -> CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE . cuerpo LLAVE_CIERRA
    (2) cuerpo -> . declaracion cuerpo2
    (3) cuerpo -> . asig cuerpo2
    (4) cuerpo -> . println cuerpo2
    (5) cuerpo -> . para cuerpo2
    (6) cuerpo -> . sif cuerpo2
    (7) cuerpo -> . dhacer cuerpo2
    (8) cuerpo -> . res cuerpo2
    (9) cuerpo -> . empty
    (12) declaracion -> . tipod asig
    (17) asig -> . ID tipoasig masasig TOKEN_ASIG
    (16) println -> . PRINTLN idnum TOKEN_ASIG
    (27) para -> . CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA
    (33) sif -> . COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA
    (34) dhacer -> . CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA
    (35) res -> . idnum oparit idnum
    (49) empty -> .
    (13) tipod -> . INTEGER
    (14) tipod -> . DOUBLE
    (15) tipod -> . STRING
    (20) idnum -> . num
    (21) idnum -> . ID
    (22) num -> . NUM_INTEGER
    (23) num -> . NUM_DOUBLE

    ID              shift and go to state 21
    PRINTLN         shift and go to state 7
    CIC_FOR         shift and go to state 20
    COND_IF         shift and go to state 6
    CIC_DO          shift and go to state 19
    LLAVE_CIERRA    reduce using rule 49 (empty -> .)
    INTEGER         shift and go to state 14
    DOUBLE          shift and go to state 23
    STRING          shift and go to state 16
    NUM_INTEGER     shift and go to state 22
    NUM_DOUBLE      shift and go to state 8

    num                            shift and go to state 24
    para                           shift and go to state 17
    tipod                          shift and go to state 5
    asig                           shift and go to state 9
    res                            shift and go to state 10
    idnum                          shift and go to state 11
    dhacer                         shift and go to state 12
    cuerpo                         shift and go to state 95
    empty                          shift and go to state 15
    sif                            shift and go to state 13
    println                        shift and go to state 26
    declaracion                    shift and go to state 25

state 86

    (28) condicionpara -> inicio TOKEN_ASIG fin . TOKEN_ASIG indec

    TOKEN_ASIG      shift and go to state 96


state 87

    (30) fin -> ID . oprel idnum
    (43) oprel -> . MNQ
    (44) oprel -> . MYQ
    (45) oprel -> . MNIQ
    (46) oprel -> . MYIQ
    (47) oprel -> . EQ
    (48) oprel -> . DIST

    MNQ             shift and go to state 71
    MYQ             shift and go to state 68
    MNIQ            shift and go to state 66
    MYIQ            shift and go to state 70
    EQ              shift and go to state 72
    DIST            shift and go to state 67

    oprel                          shift and go to state 97

state 88

    (29) inicio -> ID IGUAL idnum .

    TOKEN_ASIG      reduce using rule 29 (inicio -> ID IGUAL idnum .)


state 89

    (19) tipoasig -> IGUAL COMILLA ID COMILLA .

    COMA            reduce using rule 19 (tipoasig -> IGUAL COMILLA ID COMILLA .)
    MAS             reduce using rule 19 (tipoasig -> IGUAL COMILLA ID COMILLA .)
    MENOS           reduce using rule 19 (tipoasig -> IGUAL COMILLA ID COMILLA .)
    MULTI           reduce using rule 19 (tipoasig -> IGUAL COMILLA ID COMILLA .)
    DIVI            reduce using rule 19 (tipoasig -> IGUAL COMILLA ID COMILLA .)
    TOKEN_ASIG      reduce using rule 19 (tipoasig -> IGUAL COMILLA ID COMILLA .)


state 90

    (24) masasig -> COMA asig masasig .

    TOKEN_ASIG      reduce using rule 24 (masasig -> COMA asig masasig .)


state 91

    (25) masasig -> oparit idnum masasig .

    TOKEN_ASIG      reduce using rule 25 (masasig -> oparit idnum masasig .)


state 92

    (33) sif -> COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE . cuerpo LLAVE_CIERRA
    (2) cuerpo -> . declaracion cuerpo2
    (3) cuerpo -> . asig cuerpo2
    (4) cuerpo -> . println cuerpo2
    (5) cuerpo -> . para cuerpo2
    (6) cuerpo -> . sif cuerpo2
    (7) cuerpo -> . dhacer cuerpo2
    (8) cuerpo -> . res cuerpo2
    (9) cuerpo -> . empty
    (12) declaracion -> . tipod asig
    (17) asig -> . ID tipoasig masasig TOKEN_ASIG
    (16) println -> . PRINTLN idnum TOKEN_ASIG
    (27) para -> . CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA
    (33) sif -> . COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA
    (34) dhacer -> . CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA
    (35) res -> . idnum oparit idnum
    (49) empty -> .
    (13) tipod -> . INTEGER
    (14) tipod -> . DOUBLE
    (15) tipod -> . STRING
    (20) idnum -> . num
    (21) idnum -> . ID
    (22) num -> . NUM_INTEGER
    (23) num -> . NUM_DOUBLE

    ID              shift and go to state 21
    PRINTLN         shift and go to state 7
    CIC_FOR         shift and go to state 20
    COND_IF         shift and go to state 6
    CIC_DO          shift and go to state 19
    LLAVE_CIERRA    reduce using rule 49 (empty -> .)
    INTEGER         shift and go to state 14
    DOUBLE          shift and go to state 23
    STRING          shift and go to state 16
    NUM_INTEGER     shift and go to state 22
    NUM_DOUBLE      shift and go to state 8

    num                            shift and go to state 24
    para                           shift and go to state 17
    tipod                          shift and go to state 5
    asig                           shift and go to state 9
    res                            shift and go to state 10
    idnum                          shift and go to state 11
    empty                          shift and go to state 15
    dhacer                         shift and go to state 12
    cuerpo                         shift and go to state 98
    sif                            shift and go to state 13
    println                        shift and go to state 26
    declaracion                    shift and go to state 25

state 93

    (37) mascondicion -> idnum oprel . mascondicion
    (37) mascondicion -> . idnum oprel mascondicion
    (38) mascondicion -> . idnum
    (20) idnum -> . num
    (21) idnum -> . ID
    (22) num -> . NUM_INTEGER
    (23) num -> . NUM_DOUBLE

    ID              shift and go to state 31
    NUM_INTEGER     shift and go to state 22
    NUM_DOUBLE      shift and go to state 8

    mascondicion                   shift and go to state 99
    num                            shift and go to state 24
    idnum                          shift and go to state 83

state 94

    (34) dhacer -> CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE . condicion PAREN_CIERRA
    (36) condicion -> . ID oprel mascondicion

    ID              shift and go to state 52

    condicion                      shift and go to state 100

state 95

    (27) para -> CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 101


state 96

    (28) condicionpara -> inicio TOKEN_ASIG fin TOKEN_ASIG . indec
    (31) indec -> . idnum MAS MAS
    (32) indec -> . idnum MENOS MENOS
    (20) idnum -> . num
    (21) idnum -> . ID
    (22) num -> . NUM_INTEGER
    (23) num -> . NUM_DOUBLE

    ID              shift and go to state 31
    NUM_INTEGER     shift and go to state 22
    NUM_DOUBLE      shift and go to state 8

    idnum                          shift and go to state 102
    indec                          shift and go to state 103
    num                            shift and go to state 24

state 97

    (30) fin -> ID oprel . idnum
    (20) idnum -> . num
    (21) idnum -> . ID
    (22) num -> . NUM_INTEGER
    (23) num -> . NUM_DOUBLE

    ID              shift and go to state 31
    NUM_INTEGER     shift and go to state 22
    NUM_DOUBLE      shift and go to state 8

    num                            shift and go to state 24
    idnum                          shift and go to state 104

state 98

    (33) sif -> COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 105


state 99

    (37) mascondicion -> idnum oprel mascondicion .

    PAREN_CIERRA    reduce using rule 37 (mascondicion -> idnum oprel mascondicion .)


state 100

    (34) dhacer -> CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion . PAREN_CIERRA

    PAREN_CIERRA    shift and go to state 106


state 101

    (27) para -> CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA .

    ID              reduce using rule 27 (para -> CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA .)
    PRINTLN         reduce using rule 27 (para -> CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA .)
    CIC_FOR         reduce using rule 27 (para -> CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA .)
    COND_IF         reduce using rule 27 (para -> CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA .)
    CIC_DO          reduce using rule 27 (para -> CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA .)
    INTEGER         reduce using rule 27 (para -> CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA .)
    DOUBLE          reduce using rule 27 (para -> CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA .)
    STRING          reduce using rule 27 (para -> CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA .)
    NUM_INTEGER     reduce using rule 27 (para -> CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA .)
    NUM_DOUBLE      reduce using rule 27 (para -> CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 27 (para -> CIC_FOR PAREN_ABRE condicionpara PAREN_CIERRA LLAVE_ABRE cuerpo LLAVE_CIERRA .)


state 102

    (31) indec -> idnum . MAS MAS
    (32) indec -> idnum . MENOS MENOS

    MAS             shift and go to state 107
    MENOS           shift and go to state 108


state 103

    (28) condicionpara -> inicio TOKEN_ASIG fin TOKEN_ASIG indec .

    PAREN_CIERRA    reduce using rule 28 (condicionpara -> inicio TOKEN_ASIG fin TOKEN_ASIG indec .)


state 104

    (30) fin -> ID oprel idnum .

    TOKEN_ASIG      reduce using rule 30 (fin -> ID oprel idnum .)


state 105

    (33) sif -> COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA .

    ID              reduce using rule 33 (sif -> COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA .)
    PRINTLN         reduce using rule 33 (sif -> COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA .)
    CIC_FOR         reduce using rule 33 (sif -> COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA .)
    COND_IF         reduce using rule 33 (sif -> COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA .)
    CIC_DO          reduce using rule 33 (sif -> COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA .)
    INTEGER         reduce using rule 33 (sif -> COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA .)
    DOUBLE          reduce using rule 33 (sif -> COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA .)
    STRING          reduce using rule 33 (sif -> COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA .)
    NUM_INTEGER     reduce using rule 33 (sif -> COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA .)
    NUM_DOUBLE      reduce using rule 33 (sif -> COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 33 (sif -> COND_IF PAREN_ABRE condicion PAREN_CIERRA COND_THEN LLAVE_ABRE cuerpo LLAVE_CIERRA .)


state 106

    (34) dhacer -> CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA .

    ID              reduce using rule 34 (dhacer -> CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA .)
    PRINTLN         reduce using rule 34 (dhacer -> CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA .)
    CIC_FOR         reduce using rule 34 (dhacer -> CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA .)
    COND_IF         reduce using rule 34 (dhacer -> CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA .)
    CIC_DO          reduce using rule 34 (dhacer -> CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA .)
    INTEGER         reduce using rule 34 (dhacer -> CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA .)
    DOUBLE          reduce using rule 34 (dhacer -> CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA .)
    STRING          reduce using rule 34 (dhacer -> CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA .)
    NUM_INTEGER     reduce using rule 34 (dhacer -> CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA .)
    NUM_DOUBLE      reduce using rule 34 (dhacer -> CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA .)
    LLAVE_CIERRA    reduce using rule 34 (dhacer -> CIC_DO LLAVE_ABRE cuerpo LLAVE_CIERRA CIC_WHILE PAREN_ABRE condicion PAREN_CIERRA .)


state 107

    (31) indec -> idnum MAS . MAS

    MAS             shift and go to state 109


state 108

    (32) indec -> idnum MENOS . MENOS

    MENOS           shift and go to state 110


state 109

    (31) indec -> idnum MAS MAS .

    PAREN_CIERRA    reduce using rule 31 (indec -> idnum MAS MAS .)


state 110

    (32) indec -> idnum MENOS MENOS .

    PAREN_CIERRA    reduce using rule 32 (indec -> idnum MENOS MENOS .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 33 resolved using rule (cuerpo -> empty)
WARNING: rejected rule (cuerpo2 -> empty) in state 33
WARNING: Rule (cuerpo2 -> empty) is never reduced
